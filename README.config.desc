    Configuration file parameters and rules (Reference)
=================================================

General Syntax:

    .keyword            - start of syntax block
    .                   - end of previous block
    key = value(s)      - attach value(s) to key
    regs = \n
    registers = \n      - start of special register block ending by '.'
    (square brackets means "optional")

    addresses, sizes and alignments can be decimal or hexidecimal

    #                   - comment start, up to end of file

-----------------------------------------------------------------------
Register and memory blocks flag letters:

    r                   - Read
    w                   - Write
    x                   - Executable
    i                   - write ignored
    s                   - shared between VMs
    e                   - emulated
    u                   - uncached
    n                   - cached (default)
    a                   - cache write accelerated (not work with 'e')
    t                   - cached, write-through (not work with 'e')

-----------------------------------------------------------------------
Semantics:

.vm                                     - start a new VM description

id = number                             - VM id. Required

regs = vaddress size flags [physaddr]
registers = ...                         - device register block,
					  with size at virtual address.
					  if physaddr is given then it
					  can be different from virtual
       vaddress size flags [physaddr]   - One of lines in special regs block
					  (after ".regs" line)

entry = address                         - Guest entry point virtual address
					  Required

elf = filename                          - Guest ELF binary file location.
					  File is used to extract code/data
					  sections addresses, sizes and
					  alignments (alignments are not used)
					  It is also used for building a final
					  merge script to create a single
					  downloadable file

file = filename                         - an alternative to "elf", if map values
					  can't be extracted from guest binary

.mmap                                   - start memory map description block
					  Second block in VM is appended to
					  the first one

  code = vaddress size [flags [physaddr]] - VM guest code section, same rule
					    as "registers". Default flags are rx

  data = vaddress size [flags [physaddr]] - VM guest data section, same rule
					    as "registers". Default flags are rw

  rom = vaddress size flags ALIGNMENT     - VM guest code section for automatic
					    allocation by configurator.
					    See board config description details.
					    The last statement in VM description
					    replaces the previous

  ram = vaddress size flags ALIGNMENT     - VM guest data section for automatic
					    allocation by configurator.
					    See board config description details.
					    The last statement in VM description
					    replaces the previous

irq = irq1 irq2 ... irqN                - list of IRQs requested by VM

irqpolling = 1                          - Flag which indicates that VM has no
					  interrupt handlers

dma = address size flags                  (PIC32MZEF)
					  Indicates that VM uses DMA and defines
					  DMA-capable piece of memory.
					  Address is virtual address and should be
					  equal to physical address.
					  This is used to configure System Bus
					  Arbiter registers to restrict DMA to
					  this zone. Size should be power of 2
					  kilobytes and address must be aligned to size.

device = devicename                     - include "devicename" description from
					  library of devices "device.lib"

.device                                 - start a single device block

  name = devicename                       - inside deviceblock - name of device

  dma-cfgpg-position = bitposition        - (PIC32MZEF)
					    Inside deviceblock - the position of
					    Priviledge Group bits in CFGPG register
					    for this DMA device. Configuration writes
					    into this position the PG number of
					    this VM. Need for guest DMA protection
					    via System Bus permission capability.
					    Microchip PIC32MZEF Family Data Sheet sections:
						4.2-4.3 System Bus Arbitration
						34.0 Special features

  dma-set = Peripheral Set number         - (PIC32MZEF)
					    Inside device - the number of Peripheral
					    Set for this slave (non-DMA) device.
					    Configuration uses this number to
					    calculate which PS register in System
					    Bus Arbiter can be used to configure
					    DMA access to this device.

  irq = irq1 irq2 ... irqN                - inside deviceblock - list of IRQs
					    used by device

  share = 1                               - device can be shared among VMs

  emulator = name                         - use emulator "name" as a device
					    emulator. Requires emulator in tinyVP
					    Ex: console, ic_emulator

-----------------------------------------------------------------------

    Board configuration file description
==============================================

File should have a couple of key = value(s) lines:

PLATFORM = platformname

    This is a name of Python module in 'platforms' subdirectory.
    So far, only pic32mz2048efg100 is defined here.

BOOT = bootloaderfilename

    This is a file with bootloader source code. So far - 'boot.S'
    If it is empty, it means that bootloader is not included and
    board initialization at BFC00000 address must be done some external code.
    Of course, some way to jump to tinyVP start address must be provided
    in that boot initalization code. Besides Digilent ChipKit WiFire board
    all boards haven't a tested bootloader, so it should be specified here.
    Specification it for Digilent board is possible but for now you lose
    a flash over serial capability after that.

DEVCFG = boards/boardEFUSEinitialization-module-source-code
DEVCFGADDR = 0x9FC0FFC0

    This is a way to define PIC32MZEF EFUSE board configurations (master clock
    parameters, EJTAG availability, flash protection etc). Without that magic
    4 word a pic32prog can't flash BOOT code into BFC00000.
	File 'null.S' can be indicated if there is no needs for EFUSE setup.
	It is recommended to take one of example. Address is predefined in
    PIC32MZEF SoC chip.

BOARDINIT = boards/boardinitsourcecodefilename.S platforms/pic32mzef-setup.S

    This is a module which is used for board initialization (pin/port routing,
    some perfipheral clocks setup, LED initialization etc).
	It also contains the simple board-dependent functions which may indicate
    a boot progress/boot failure via LEDs, for exam.
	File platforms/pic32mzef-setup.S has a simple unlock/setup/lock board
    registers functions which can be used for PIC32MZEF. It can be replaced or
    ommited if board register setup is undesirable, but it eliminates guest
    DMA protection.

rom = start-physaddress end-physaddress
ram = start-physaddress end-physaddress

    Both lines are used for automatic allocation of code and data
    for guests. Guest code values can be reliably taken from .elf file and
    start-physaddress is usually equal to a board flash address.
    Data _size_ can't be extracted reliably from .ELF and "ram" line in VM
    description in configuration file is needed to use an automatic allocation.
    Allocation is done in sequence of VM occurance in configuration file,
    not in VMid sequence. It may be significant in case of DMA-capable guest
    because DMA requires matching guest virtual address to board physaddress.

    For this reason the build process is split in two - map values extraction
    from .ELF files and then the configuration and build. Between both steps
    it is possible to put an appropriate "ram" line directly in .mmap of VM
    basing on extracted values after "elf" line, and replace map file value.
    See an example of configuration file.

eret_page = 0x9ffff000

    This is a virtual address in VM7 of a special page to clear Guest.LLbit
    during guest reschedule. It is needed because of Config5.LLB is not
    implemented in M5150 (MIPS core of PIC32MZEF)

vzcode  =   0x9D000000 or 9FC00000

    Start address of tinyVP code. 9FC00000 should be chosen for bootloader
    provided with tinyVP.

vzentry =   0x9D001000

    Entry point of tinyVP after boot. It has no meaning for tinyVP bootloader.

vzdata =    0x80078000

    Start address of tinyVP data section in RAM

vzstacktop  =   0x80080000

    End address of tinyVP data section in RAM - stack top
